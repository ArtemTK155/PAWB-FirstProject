{"remainingRequest":"/usr/src/app/node_modules/babel-loader/lib/index.js!/usr/src/app/node_modules/eslint-loader/index.js??ref--13-0!/usr/src/app/src/store.js","dependencies":[{"path":"/usr/src/app/src/store.js","mtime":1572120509446},{"path":"/usr/src/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/usr/src/app/src/store.js"],"names":["Vue","Vuex","axios","use","Store","state","count","tesData","dummy","autoCompEmpNames","autoCompFreg","namesAdded","searchResult","getters","names","fregs","mutations","setNames","newName","push","setFregs","newFreg","increment","addData","newData","addDataEmpNames","console","log","getEmpNames","get","response","error","addDataFreg","add","actions","fetchNames","commit","data","fetchFregs","addNames"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from \"axios\";\n\nVue.use(Vuex)\n\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n    tesData: [],\n    dummy: \"hello\",\n    autoCompEmpNames: [],\n    autoCompFreg: [],\n    namesAdded: false,\n    searchResult: []\n\n  },\n  getters: {\n    names: (state) => state.autoCompEmpNames,\n    fregs: (state) => state.autoCompFreg\n  },\n\n  mutations: {\n    setNames(state, names){\n      state.autoCompEmpNames = names\n    },\n    newName (state, names){\n      state.autoCompEmpNames.push(names)\n    },\n    setFregs(state, fregs){\n      state.autoCompFreg = fregs\n    },\n    newFreg (state, fregs){\n      state.autoCompFreg.push(fregs)\n    },\n\n    increment() {\n      this.state.count++\n    },\n    addData(state, newData) {\n      // console.log(\"Mutatuing in store\")\n      state.tesData.push(newData)\n      //console.log(state.tesData)\n    },\n    addDataEmpNames(state, newData) {\n      console.log(\"Mutatuing in store\")\n      state.autoCompEmpNames.push(newData)\n      console.log(state.autoCompEmpNames)\n    },\n    async getEmpNames(state) {\n      try {\n        const response = await axios.get(\"http://localhost:4000/empresas/name\");\n        state.autoCompEmpNames = response\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async addDataFreg(state) {\n      try {\n        const response = await axios.get(\"http://localhost:4000/empresas/freg\");\n        state.autoCompFreg = response\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    add(state) {\n      console.log(\"added\")\n      state.autoCompEmpNames.push()\n    }\n  },\n  actions: {\n    async fetchNames({ commit }) {\n      try {\n        const response = await axios.get(\"http://localhost:4000/empresas/name\");\n        console.log(\"action\")\n        commit('setNames', response.data)\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async fetchFregs({ commit }) {\n      try {\n        const response = await axios.get(\"http://localhost:4000/empresas/freg\");\n        console.log(\"action\")\n        commit('setFregs', response.data)\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async addNames({ commit }) {\n      try {\n        const response = await axios.get(\"http://localhost:4000/empresas/name\");\n        commit('newName', response.data)\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n})\n\n"]}]}